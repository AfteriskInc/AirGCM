package com.afterisk.shared.android.gcm;

import java.util.List;

import android.app.ActivityManager;
import android.app.ActivityManager.RunningAppProcessInfo;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;

import com.adobe.fre.FREContext;
import com.distriqt.extension.util.Resources;
import com.google.android.gcm.GCMBaseIntentService;

public class GCMIntentService extends GCMBaseIntentService
{

	@Override
	public void onRegistered(Context context, String regId)
	{
		FREContext freContext = GCMPushExtension.context;
		freContext.dispatchStatusEventAsync("registered", regId);
	}

	@Override
	public void onUnregistered(Context context, String regId)
	{
		FREContext freContext = GCMPushExtension.context;
		freContext.dispatchStatusEventAsync("unregistered", regId);
	}

	@Override
	public void onMessage(Context context, Intent intent)
	{
		Bundle ex = intent.getExtras();
		String alert = ex.getString("alert");
		String type = ex.getString("type");
		String id = ex.getString("id");
		String payload = "type:" + type + "," + "id:" + id;
		
		FREContext freContext = GCMPushExtension.context;
		
		Context appContext;
		if(freContext != null)
		{
			freContext.dispatchStatusEventAsync("foregroundMessage", payload);
			appContext = freContext.getActivity();
		}
		else
		{
			appContext = context.getApplicationContext();
		}
		
		if(!isAppInForeground(appContext))
		{
			if(freContext != null)
			{
				freContext.dispatchStatusEventAsync("message", payload);
			}
			
			String ns = Context.NOTIFICATION_SERVICE;
			NotificationManager mNotificationManager = (NotificationManager) appContext.getSystemService(ns);
			
			int icon = Resources.getResourseIdByName(appContext.getPackageName(), "drawable", "notify");//freContext.getResourceId("drawable.notify");
			CharSequence tickerText = alert;
			long when = System.currentTimeMillis();
			
			Notification notification = new Notification(icon, tickerText, when);
			//notification.defaults = Notification.DEFAULT_ALL;
			notification.flags |= Notification.FLAG_AUTO_CANCEL;
			
			CharSequence contentTitle = "Sketch Guess";
			CharSequence contentText = alert;
			
			try
			{
				Intent notificationIntent = new Intent(appContext, 
						Class.forName(appContext.getPackageName() + ".AppEntry"));
				notificationIntent.putExtra("data", payload);
				
				PendingIntent contentIntent = PendingIntent.getActivity(appContext, 0, notificationIntent, PendingIntent.FLAG_UPDATE_CURRENT);
				
				notification.setLatestEventInfo(appContext, contentTitle, contentText, contentIntent);
				
				int HELLO_ID = 1;
				mNotificationManager.notify(HELLO_ID, notification);
			}
			catch (IllegalStateException e) 
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			catch (ClassNotFoundException e) 
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	@Override
	public void onError(Context context, String errorId)
	{
		FREContext freContext = GCMPushExtension.context;
		freContext.dispatchStatusEventAsync("error", errorId);
	}

	@Override
	public boolean onRecoverableError(Context context, String errorId)
	{
		FREContext freContext = GCMPushExtension.context;
		freContext.dispatchStatusEventAsync("recoverableError", errorId);
		return super.onRecoverableError(context, errorId);
	}
	
	private boolean isAppInForeground(Context context) 
    {
        ActivityManager activityManager = (ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);
        List<RunningAppProcessInfo> appProcesses = activityManager.getRunningAppProcesses();
        if (appProcesses != null) 
        {
        	final String packageName = context.getPackageName();
            for (RunningAppProcessInfo appProcess : appProcesses) 
            {
            	if (appProcess.importance == RunningAppProcessInfo.IMPORTANCE_FOREGROUND && appProcess.processName.equals(packageName)) 
            	{
            		return true;
            	}
            }
        }
        
        return false;
    }
}